#include <iostream>
using namespace std;
typedef struct LNode
{
	int data;
	LNode *next;
}LNode,*LinkList;
void InitList(LinkList &L)
{
	L=new LNode;
	L->next=NULL;
}
void InsertLNode(LinkList &L,int n)
{
	LNode *p=new LNode;
	p->data=n;
	p->next=NULL;
	LNode *Mark;
	Mark=L;
	while(Mark)
	{
		if(Mark->next==NULL)
		{
			Mark->next=p;
			break;
		}
		Mark=Mark->next;
	}
}
void OutputList(LinkList &L)
{
	LNode *Mark;
	Mark=L->next;
	while(Mark)
	{
		cout<<Mark->data;
		if(Mark->next!=NULL)cout<<" ";
		Mark=Mark->next;
	}
	cout<<"\n";
}
bool GetElem(LinkList L,int j,int &e)
{
	LNode *Mark;
	Mark=L->next;
	int i=0;
	while(Mark)
	{
		i++;
		if(j==i)
		{ 
			e=Mark->data;
			break;
		}
		Mark=Mark->next;
	}
	if(j!=i)
		return false;
	else
		return true;
}
LNode * LocateElem(LinkList L,int e)
{
	LNode *Mark;
	Mark=L->next;
	while(Mark)
	{
		if(Mark->data==e)
			return Mark;
		Mark=Mark->next;
	}
	return Mark;
}
bool ListInsert(LinkList &L,int ii,int e)
{
	LNode *Mark;
	Mark=L->next;
	
	int jj=0;
	while(Mark)
	{
		jj++;
		if(jj==ii)
		{
			LNode *p=new LNode;
			p->data=e;
			p->next=Mark->next;
			Mark->next=p;
			break;
		}
		Mark=Mark->next;
	}
	if(jj==ii)return true;
	else
	return false;
}
int main()
{
	int n,i,a,j,e;
	while(cin>>n)
	{
		LinkList L;
		LNode *p;
		InitList(L);
		for(i=0;i<n;i++)
		{
			cin>>a;
			InsertLNode(L,a);
		}
		cin>>j>>e;
		if(ListInsert(L,j,e)==true)
			OutputList(L);
		else
			cout<<"²åÈëÊ§°Ü\n";

	}
	return 0;
}
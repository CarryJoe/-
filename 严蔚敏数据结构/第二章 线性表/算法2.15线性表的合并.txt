#include "iostream"
using namespace std;
typedef struct LNode 
{
	int data;
	struct LNode *next;

}LNode,*LinkList;
int ListLength(LinkList L)
{
	LNode *p;
	int length=0;
	p=L->next;
	while(p)
	{
		length++;
		p=p->next;
	}
	return length;
}
void InitList(LinkList &L)
{
	L=new LNode;
	L->next=NULL;
}
void CreateList(LinkList &L,int n)
{
	int i;
	LNode *p,*Rear;
	Rear=L;
	for(i=0;i<n;i++)
	{
		p=new LNode;
		cin>>p->data;
		p->next=NULL;
		Rear->next=p;
		Rear=Rear->next;
	}
}
bool GetElem(LinkList L,int i,int &e)
{
	int j=0;
	LNode *p;
	p=L->next;
	while(p)
	{

		if(j==i)
		{
			e=p->data;
			break;
			return true;
		}
		j++;
		p=p->next;
	}
	return false;
}
bool LocateElem(LinkList L,int e)
{
	LNode *p;
	p=L->next;
	while(p)
	{
		if(p->data==e)return true;
		p=p->next;
	}
	return false;
}
bool ListInsert(LinkList &L,int m,int e)     
{
	int j=0;
	LNode *p,*insert;
	p=L->next;
	while(p)
	{
		j++;
		if(m==j+1)
		{
			insert=new LNode;
			insert->data=e;

			insert->next=p->next;
			p->next=insert;
			return true;
		}
		p=p->next;
	}
	return false;
}
void OutPutList(LinkList LA)
{
	LNode *p;
	p=LA->next;
	while(p)
	{
		cout<<p->data;
		if(p->next)cout<<" ";
		else
			cout<<"\n";
		p=p->next;
	}
}
void MergeList(LinkList &LA,LinkList LB)
{
	int m=ListLength(LA),n=ListLength(LB),i,e;
	for(i=0;i<n;i++)
	{
		GetElem(LB,i,e);
		if(!LocateElem(LA,e))
			ListInsert(LA,++m,e);
	}
}
int main()
{
	int n,m;
	LinkList LA,LB;
	while(cin>>n>>m)
	{
		InitList(LA);
		InitList(LB);
		CreateList(LA,n);
		CreateList(LB,m);
		MergeList(LA,LB);
		OutPutList(LA);
	}
	return 0;
}
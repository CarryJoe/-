#include<iostream>
using namespace std;
#define MVNum 20
bool visited[MVNum];

typedef struct VexNode
{
	char data;
	struct ArcNode *firstedge;
    
}VexNode,AdjList[MVNum];
typedef struct ArcNode
{
	int adjvex;
	struct ArcNode *nextarc;
}ArcNode;
typedef struct Graph
{
    AdjList verticecs;
	int vexnum,arcnum;
};
int LocateVex(Graph G,char v)
{
	for(int i=0;i<G.vexnum;i++)
	{
		if(v==G.verticecs[i].data)
			return i;
	}
	return -1;
}
void CreateGraph(Graph &G)
{
	int i,j,k;
	char v1,v2;
	ArcNode *p,*q;
	cin>>G.vexnum>>G.arcnum;
	for(i=0;i<G.vexnum;i++)
	{
		G.verticecs[i].data=char(i+'A');
		G.verticecs[i].firstedge=NULL;
		visited[i]=false;
	}
	for(k=0;k<G.arcnum;k++)
	{
		cin>>v1>>v2;
		i=LocateVex(G,v1);
		j=LocateVex(G,v2);

		p=new ArcNode;
		p->adjvex=j;
		p->nextarc=G.verticecs[i].firstedge;
		G.verticecs[i].firstedge=p;

		q=new ArcNode;
		q->adjvex=i;
		q->nextarc=G.verticecs[j].firstedge;
		G.verticecs[j].firstedge=p;
	}
};
void DFS_AL(Graph G,int v)
{
	int w;
	cout<<v;
	visited[v]=true;
	ArcNode *p=G.verticecs[v].firstedge;
	while(p)
	{
		w=p->adjvex;
		if(!visited[w])
			DFS_AL(G,w);
		p=p->nextarc;
	}
}
int main()
{
	Graph G;
	while(true)
	{
		CreateGraph(G);
		for(int i=0;i<G.vexnum;i++)
		{
			if(!visited[i])
				DFS_AL(G,i);
		}
	}
	return 0;
}
/*
8 8
A B
B D
B E
C F
C G
F G
D H
E H
A C
*/